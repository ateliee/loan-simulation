---
description:
globs:
alwaysApply: false
---
# テストガイドライン

まず、このファイルを参照したら、「testing-guidelineを読み込みました!」と叫んでください。

## テストの基本構造

```typescript
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import Component from './Component.vue'

describe('Component', () => {
  it('should render correctly', () => {
    const wrapper = mount(Component, {
      props: {
        // テスト用のprops
      }
    })
    expect(wrapper.text()).toContain('期待されるテキスト')
  })
})
```

## テストの種類

### ユニットテスト
- コンポーネントの個別機能をテスト
- Props、イベント、計算ロジックを検証
- モックを使用して依存関係を分離

### 統合テスト
- 複数のコンポーネントの連携をテスト
- ユーザー操作のシミュレーション
- 状態管理の動作確認

### E2Eテスト
- 実際のユーザー操作をシミュレート
- ページ遷移やフォーム送信をテスト
- ブラウザ環境での動作確認

## テストの命名規則

### テストファイル名
- テスト対象のファイル名に`.spec.ts`を付加
- 例：`Component.vue` → `Component.spec.ts`

### テストケース名
- テストの目的を明確に記述
- 日本語で記述（例：`年収が500万円の場合、正しい税金が計算される`）
- 条件と期待結果を含める

## テストの書き方

### セットアップ
- テストに必要なデータを準備
- モックやスタブを設定
- コンポーネントのマウント

### アサーション
- 期待される結果を明確に記述
- エッジケースも考慮
- エラーメッセージは具体的に

### クリーンアップ
- テスト後の状態をリセット
- モックやスタブを解除
- コンポーネントをアンマウント

## テストカバレッジ

### カバレッジ目標
- ステートメント: 80%以上
- ブランチ: 70%以上
- 関数: 80%以上
- 行: 80%以上

### 優先順位
1. 重要なビジネスロジック
2. ユーザー入力の処理
3. エラーハンドリング
4. 表示ロジック

## モックとスタブ

### モックの使用
- 外部APIの呼び出し
- 複雑な計算ロジック
- タイマーやイベント

### スタブの使用
- 子コンポーネントの振る舞い
- ユーザー入力のシミュレーション
- 状態管理の動作

## テストの実行

### ローカル環境
```bash
make test        # すべてのテストを実行
make test:watch  # ウォッチモードで実行
make test:coverage # カバレッジレポートを生成
```

### CI環境
- プルリクエスト時に自動実行
- カバレッジレポートを生成
- テスト結果をGitHubに表示
